message(STATUS "TUNGSTENFORGE_CLEAN_EMPTY_DIRS = @TUNGSTENFORGE_CLEAN_EMPTY_DIRS@")
if(@TUNGSTENFORGE_CLEAN_EMPTY_DIRS@)
    message(NOTICE "Uninstall will clean up empty parent directories")
else()
    message(NOTICE "Uninstall will NOT clean up empty parent directories")
endif()
message(STATUS "TUNGSTENFORGE_UNINSTALL_DRY_RUN = @TUNGSTENFORGE_UNINSTALL_DRY_RUN@")
if(@TUNGSTENFORGE_UNINSTALL_DRY_RUN@)
    message(NOTICE "Dry-run: nothing will be removed")
endif()

set(manifest_path "@CMAKE_CURRENT_BINARY_DIR@/install_manifest.txt")
message(STATUS "Using install manifest: ${manifest_path}")
if(NOT EXISTS "${manifest_path}")
    message(FATAL_ERROR " Uninstall failed: '${manifest_path}' not found. Run install first.")
endif()

if(NOT DEFINED CMAKE_INSTALL_PREFIX)
    set(CMAKE_INSTALL_PREFIX "@CMAKE_INSTALL_PREFIX@")
endif()

if(@TUNGSTENFORGE_CLEAN_EMPTY_DIRS@)
    if(CMAKE_INSTALL_PREFIX STREQUAL "/usr" OR CMAKE_INSTALL_PREFIX STREQUAL "/")
        message(FATAL_ERROR "Refusing to clean directories under '${CMAKE_INSTALL_PREFIX}'")
    endif()
endif()

file(READ "${manifest_path}" files_raw)
string(REGEX REPLACE "\r?\n" ";" files "${files_raw}")

set(full_paths "")
foreach(file IN LISTS files)
    string(STRIP "${file}" file)
    if(file STREQUAL "")
        continue()
    endif()

    # Resolve DESTDIR prefix (if set)
    if(DEFINED ENV{DESTDIR})
        file(TO_CMAKE_PATH "$ENV{DESTDIR}" DESTDIR_PATH)
        string(REGEX REPLACE "/$" "" DESTDIR_PATH "${DESTDIR_PATH}")
        set(_resolved_path "${DESTDIR_PATH}${file}")
        if(NOT IS_ABSOLUTE "${_resolved_path}")
            message(WARNING "Resolved uninstall path is not absolute: ${_resolved_path}")
        endif()
        list(APPEND full_paths "${_resolved_path}")
    else()
        list(APPEND full_paths "${file}")
    endif()
endforeach()

list(REMOVE_DUPLICATES full_paths)

set(success_count 0)
set(fail_count 0)

if(@TUNGSTENFORGE_CLEAN_EMPTY_DIRS@)
    if(@TUNGSTENFORGE_UNINSTALL_DRY_RUN@)
        set(would_remove_paths "")
    endif()

    function(remove_empty_parents dir limit)
        # Convert to fully normalized absolute paths
        file(REAL_PATH "${dir}" abs_dir)
        file(REAL_PATH "${limit}" abs_limit)

        # Safety check: ensure abs_dir starts with abs_limit
        string(FIND "${abs_dir}" "${abs_limit}" pos)
        if(NOT pos EQUAL 0)
            message(WARNING " Refusing to remove: '${abs_dir}' is not under '${abs_limit}'")
            return()
        endif()
        set(current "${abs_dir}")

        while(NOT current STREQUAL "${abs_limit}")
            if(NOT IS_DIRECTORY "${current}")
                break()
            endif()

            file(GLOB children "${current}/*")
            if(@TUNGSTENFORGE_UNINSTALL_DRY_RUN@)
                set(all_virtual_removed TRUE)
                foreach(child IN LISTS children)
                    file(REAL_PATH "${child}" abs_child)
                    file(TO_CMAKE_PATH "${abs_child}" normalized_child)
                    list(FIND would_remove_paths "${normalized_child}" idx)
                    if(idx EQUAL -1)
                        set(all_virtual_removed FALSE)
                        break()
                    endif()
                endforeach()

                if(NOT all_virtual_removed)
                    break()
                endif()

                message(STATUS "Would remove empty directory: ${current}")
                file(REAL_PATH "${current}" abs_current)
                file(TO_CMAKE_PATH "${abs_current}" normalized_current)
                list(APPEND would_remove_paths "${normalized_current}")
            else()
                if(NOT children STREQUAL "")
                    break()
                endif()

                message(STATUS "Removing empty directory: ${current}")
                file(REMOVE "${current}")

                if(EXISTS "${current}" OR IS_DIRECTORY "${current}")
                    message(SEND_ERROR " Failed to remove empty directory: ${current}")
                    break()
                endif()
            endif()

            get_filename_component(current "${current}" DIRECTORY)
        endwhile()
    endfunction()
endif()

if(@TUNGSTENFORGE_UNINSTALL_DRY_RUN@)
    foreach(full_path IN LISTS full_paths)
        if(IS_SYMLINK "${full_path}")
            message(STATUS "Would remove symlink: ${full_path}")
        elseif(EXISTS "${full_path}")
            message(STATUS "Would remove file: ${full_path}")
        else()
            message(STATUS "Already removed or missing: ${full_path}")
            continue()
        endif()

        math(EXPR success_count "${success_count} + 1")

        if(@TUNGSTENFORGE_CLEAN_EMPTY_DIRS@)
            file(REAL_PATH "${full_path}" abs_full)
            file(TO_CMAKE_PATH "${abs_full}" normalized_full)
            list(APPEND would_remove_paths "${normalized_full}")
            list(APPEND would_remove_paths "${full_path}")
            get_filename_component(dir "${full_path}" DIRECTORY)
            remove_empty_parents("${dir}" "${CMAKE_INSTALL_PREFIX}")
        endif()
    endforeach()
else()
    foreach(full_path IN LISTS full_paths)
        if(IS_SYMLINK "${full_path}")
            message(STATUS "Removing symlink: ${full_path}")
        elseif(EXISTS "${full_path}")
            message(STATUS "Removing file: ${full_path}")
        else()
            message(STATUS "Already removed or missing: ${full_path}")
            continue()
        endif()

        file(REMOVE "${full_path}")
        if(EXISTS "${full_path}" OR IS_SYMLINK "${full_path}")
            message(ERROR " Failed to remove: ${full_path}")
            math(EXPR fail_count "${fail_count} + 1")
        else()
            math(EXPR success_count "${success_count} + 1")
        endif()

        if(@TUNGSTENFORGE_CLEAN_EMPTY_DIRS@)
            get_filename_component(dir "${full_path}" DIRECTORY)
            remove_empty_parents("${dir}" "${CMAKE_INSTALL_PREFIX}")
        endif()
    endforeach()
endif()

if(@TUNGSTENFORGE_UNINSTALL_DRY_RUN@)
    list(LENGTH would_remove_paths total_paths)
    message(NOTICE "Dry-run summary: ${total_paths} paths would be removed (including directories).")
endif()
message(STATUS "Uninstall process completed: ${success_count} removed, ${fail_count} failed.")