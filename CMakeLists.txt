cmake_minimum_required(VERSION 3.14)

file(READ "${CMAKE_CURRENT_SOURCE_DIR}/VERSION" TUNGSTENFORGE_VERSION_RAW)
string(STRIP "${TUNGSTENFORGE_VERSION_RAW}" TUNGSTENFORGE_VERSION)
string(REPLACE "." ";" TUNGSTENFORGE_VERSION_LIST ${TUNGSTENFORGE_VERSION})

list(LENGTH TUNGSTENFORGE_VERSION_LIST _ver_len)
if(NOT _ver_len EQUAL 3)
    message(FATAL_ERROR "VERSION file contains unknown format; expected: MAJOR.MINOR.PATCH")
endif()

list(GET TUNGSTENFORGE_VERSION_LIST 0 TUNGSTENFORGE_VERSION_MAJOR)
list(GET TUNGSTENFORGE_VERSION_LIST 1 TUNGSTENFORGE_VERSION_MINOR)
list(GET TUNGSTENFORGE_VERSION_LIST 2 TUNGSTENFORGE_VERSION_PATCH)

project(TungstenForgeWorkspace VERSION ${TUNGSTENFORGE_VERSION} LANGUAGES CXX)

if(PROJECT_IS_TOP_LEVEL)
    # Multi-config generators
    if(CMAKE_CONFIGURATION_TYPES)
        set(CMAKE_CONFIGURATION_TYPES
            Debug;Release;RelWithDebInfo;MinSizeRel;Dist
            CACHE STRING "Available configurations" FORCE)
    else()
        # Single-config generators
        set_property(CACHE CMAKE_BUILD_TYPE PROPERTY
                     STRINGS "Debug;Release;RelWithDebInfo;MinSizeRel;Dist")
        if(NOT CMAKE_BUILD_TYPE)
            set(CMAKE_BUILD_TYPE Debug CACHE STRING "" FORCE)
        endif()
    endif()

    set(CMAKE_INTERPROCEDURAL_OPTIMIZATION_RELEASE ON)
    set(CMAKE_INTERPROCEDURAL_OPTIMIZATION_Dist ON)
endif()

set(TUNGSTENFORGE_VERSION        "${TUNGSTENFORGE_VERSION}"        CACHE INTERNAL "")
set(TUNGSTENFORGE_VERSION_MAJOR  "${TUNGSTENFORGE_VERSION_MAJOR}"  CACHE INTERNAL "")
set(TUNGSTENFORGE_VERSION_MINOR  "${TUNGSTENFORGE_VERSION_MINOR}"  CACHE INTERNAL "")
set(TUNGSTENFORGE_VERSION_PATCH  "${TUNGSTENFORGE_VERSION_PATCH}"  CACHE INTERNAL "")

add_subdirectory(TungstenForge)
add_subdirectory(TungstenForgeCLI)